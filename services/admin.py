from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.enums import ParseMode
from typing import List, Union
import logging
import time

from config.settings import ADMIN_IDS, DEBUG_MODE

router = Router()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        return user_id in ADMIN_IDS
    except Exception as e:
        logging.error(f"Admin check error: {e}")
        return False


@router.message(Command("admin"))
async def admin_panel(message: Message):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    admin_commands = [
        "<b>–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:</b>",
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞",
        "/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "/broadcast [—Ç–µ–∫—Å—Ç] - –†–∞—Å—Å—ã–ª–∫–∞",
        "/ban [id] - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞",
        "/log - –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥ —Ñ–∞–π–ª",
        "/debug - –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏" + (" (–∞–∫—Ç–∏–≤–µ–Ω)" if DEBUG_MODE else "")
    ]

    await message.answer("\n".join(admin_commands), parse_mode=ParseMode.HTML)


@router.message(Command("stats"))
async def bot_stats(message: Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    stats = [
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>",
        f"üÜî –í–∞—à ID: {message.from_user.id}",
        f"üë• –ê–¥–º–∏–Ω–æ–≤: {len(ADMIN_IDS)}",
        f"üîÑ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {'–í–ö–õ' if DEBUG_MODE else '–í–´–ö–õ'}",
        f"üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {time.strftime('%H:%M:%S')}"
    ]

    await message.answer("\n".join(stats), parse_mode=ParseMode.HTML)


@router.message(Command("broadcast"))
async def broadcast_message(message: Message):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    text = message.text.replace("/broadcast", "").strip()
    if not text:
        await message.answer("‚ÑπÔ∏è –ü—Ä–∏–º–µ—Ä: /broadcast –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!")
        return

    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –ë–î
    await message.answer(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞:\n\n{text}")


@router.message(Command("log"))
async def send_logs(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥-—Ñ–∞–π–ª–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    try:
        with open("bot.log", "rb") as log_file:
            await message.answer_document(log_file, caption="üìÑ –õ–æ–≥ —Ñ–∞–π–ª –±–æ—Ç–∞")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(Command("debug"))
async def toggle_debug(message: Message):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏"""
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    global DEBUG_MODE
    DEBUG_MODE = not DEBUG_MODE
    await message.answer(f"üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {'–í–ö–õ–Æ–ß–ï–ù' if DEBUG_MODE else '–í–´–ö–õ–Æ–ß–ï–ù'}")


@router.message(Command("help"))
async def help_command(message: Message):
    """–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = [
        "‚ÑπÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>",
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã",
        "/matches - –¢–µ–∫—É—â–∏–µ –º–∞—Ç—á–∏",
        "/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
    ]

    if is_admin(message.from_user.id):
        help_text.append("\nüëë <b>–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:</b>")
        help_text.append("/admin - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

    await message.answer("\n".join(help_text), parse_mode=ParseMode.HTML)
